[SERVER]
11.11.11.11

[DOWNLOAD]
wrf/4.2 https://github.com/wrf-model/WRF/archive/refs/tags/v4.2.tar.gz wrf-4.2.tar.gz

[DEPENDENCY]
module purge
module use ./software/modulefiles
./jarvis -install bisheng/2.1.0 com
module load bisheng2/2.1.0
export CC=clang CXX=clang++ FC=flang

./jarvis -install hmpi/1.1.1 clang
module load hmpi1/1.1.1
export CC=mpicc CXX=mpicxx FC=mpifort
./jarvis -install hdf5/1.10.1 clang+mpi
./jarvis -install package/pnetcdf/1.11.2 clang+mpi
./jarvis -install package/netcdf/4.7.0 clang+mpi
./jarvis -install optimized-routines/20.02/clang clang+mpi
cd ${JARVIS_TMP}
rm -rf WRF-4.2
tar -zxvf $JARVIS_DOWNLOAD/wrf-4.2.tar.gz

[ENV]
module purge
module use ./software/modulefiles
module load bisheng2/2.1.0
module load hmpi1/1.1.1
export CC=mpicc CXX=mpicxx FC=mpifort
module load hdf5/1.10.1
module load pnetcdf/1.11.2
module load netcdf/4.7.0
module load optimized-routines-clang/20.02

[APP]
app_name = WRF	
build_dir = ${JARVIS_ROOT}
binary_dir = ${JARVIS_ROOT}/software/apps/bisheng2/hmpi1/wrf
case_dir = ${JARVIS_ROOT}/software/apps/bisheng2/hmpi1/wrf

[BUILD]
cd ${JARVIS_TMP}
cd WRF-4.2

export HDF5=`which h5diff`
export HDF5=${HDF5%/*/*}
export NETCDF=`nc-config --prefix`
export PNETCDF=`pnetcdf-config --prefix`

export CPPFLAGS="-I$HDF5/include -I$PNETCDF/include -I$NETCDF/include"
export LDFLAGS="-L$HDF5/lib -L$PNETCDF/lib -L$NETCDF/lib -lnetcdf -lnetcdff -lpnetcdf -lhdf5_hl -lhdf5 -lz"
export WRFIO_NCD_LARGE_FILE_SUPPORT=1

sed -i $((`sed -n '$=' arch/configure.defaults`-2)),$((`sed -n '$=' arch/configure.defaults`))d arch/configure.defaults

cat >> arch/configure.defaults <<EOF
################################################## #########
#ARCH   Linux   aarch64,LLVM OpenMPI #serial smpar dmpar dm+sm
DESCRIPTION     =       LLVM (\$SFC/\$SCC):AArch64
DMPARALLEL      =        1
OMPCPP          =        -D_OPENMP
OMP             =        -fopenmp
OMPCC           =        -fopenmp
SFC             =       flang
SCC             =       clang
CCOMP           =       clang
DM_FC           =       mpif90
DM_CC           =       mpicc -DMPI2_SUPPORT
FC              =       CONFIGURE_FC
CC              =       CONFIGURE_CC
LD              =       \$(FC)
RWORDSIZE       =       CONFIGURE_RWORDSIZE
PROMOTION       =       
ARCH_LOCAL      =       
CFLAGS_LOCAL    =       -w -O3 -c 
LDFLAGS_LOCAL   =	-fopenmp -Wl,--build-id
FCOPTIM         =       -O3 -mcpu=tsv110 -fvectorize -funroll-loops -mllvm -unroll-indirect-loads=true -L/usr/local/kml/lib -lkm -lmathlib -lm
FCREDUCEDOPT    =       \$(FCOPTIM)
FCNOOPT         =       -O0 -fopenmp -frecursive
FCDEBUG         = 	#-g \$(FCNOOPT)
FORMAT_FIXED    =       -ffixed-form
FORMAT_FREE     =       -ffree-form 
FCSUFFIX        =
BYTESWAPIO      =       -fconvert=big-endian    
FCBASEOPTS      =       -w \$(FORMAT_FREE) \$(BYTESWAPIO)
MODULE_SRCH_FLAG =	-module \$(WRF_SRC_ROOT_DIR)/main
TRADFLAG        =      -traditional-cpp
CPP             =      /lib/cpp 
AR              =      ar
ARFLAGS         =      ru
M4              =      m4 -B 14000
RANLIB          =      ranlib
CC_TOOLS        =      \$(SCC)
###########################################################
#ARCH  NULL
EOF

echo 4 | ./configure

sed -ri "1537s/derf/erf/g" ./phys/module_mp_SBM_polar_radar.F

./compile em_real 2>&1 | tee -a compile.log 

[CLEAN]
make clean

[RUN]
run = 
binary = 
nodes = 1

